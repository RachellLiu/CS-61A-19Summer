[x*2 for x in range(10) if x % 2]
**2 pow

from fractions import gcd
def rational(n, d)
  g = gcd(n,d)##greatest common divisor
  return [n//g, d//g]
###list
d = []
###dictionary 
d = {}  
d = {0: 'Hello', 1: 'goodbye', 'a': True} 
d[0]
d['a']


# Trees


# Constructor
def tree(label, branches=[]):
    for branch in branches:
        assert is_tree(branch)
    return [label] + list(branches)

# Selectors
def label(tree):
    return tree[0]

def branches(tree):
    return tree[1:]

def is_tree(tree):
    if type(tree) != list or len(tree) < 1:
        return False
    for branch in branches(tree):
        if not is_tree(branch):
            return False
    return True

def is_leaf(tree):
    return not branches(tree)

def count_nodes(t):
    """
    >>> count_nodes(ex1)
    9
    """
    if is_leaf(t):
        return 1

    total = 0
    for b in branches(t):
        total += count_nodes(b)

    return total + 1

def count_nodes_alt(t):
    return sum([count_nodes_alt(b) for b in branches(t)]) + 1


ex2 = tree('D', [tree('B', [tree('A'), tree('C')]), tree('F', [tree('E'), tree('H', [tree('G'), tree('I')])])])

def collect_leaves(t):
    """
    >>> collect_leaves(ex2)
    ['A', 'C', 'E', 'G', 'I']
    """
    if is_leaf(t):
        return [label(t)]

    lst = []
    for b in branches(t):
        lst += collect_leaves(b)

    return lst

def collect_leaves_alt(t):
    if is_leaf(t):
        return [label(t)]

    return sum([collect_leaves_alt(b) for b in branches(t)], [])


def print_tree(t, indent=0):
    print(' '*indent, label(t)) 
    for b in branches(t):
        print_tree(b, indent + 1)




def fib_tree(n):
    """
    >>> print_tree(fib_tree(4))
     3
      1
       0
       1
      2
       1
       1
        0
        1
    """
    if n <= 1:
        return tree(n)

    left = fib_tree(n - 2)
    right = fib_tree(n - 1)
    return tree(label(left) + label(right), [left, right])
